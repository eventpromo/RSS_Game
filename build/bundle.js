!function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},s.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);var i=class extends HTMLElement{constructor(){super(),this.createdCallback()}createdCallback(){this.setAttribute("class","dashboard dashboard__content g-all-height"),this.innerHTML='<div class="header">\n                <div class="header__game">\n                    <button class="button button_new-game">New game</button>\n                </div>\n                <div class="header_timer">\n                    <div class="timer"></div>\n                </div>\n                <div class="header__user">\n                    <button class="button button_profile">Profile</button>\n                    <button class="button button_rating">Rating</button>\n                </div>\n            </div>\n            <div class="dashboard__body"></div>',this.body=this.querySelector(".dashboard__body"),this.timer=this.querySelector(".timer"),this.addListeners()}renderBody(t){return this.body.innerHTML="",this.body.appendChild(t),this.body}addListeners(){this.newGameButton=this.querySelector(".button_new-game"),this.newGameButton.addEventListener("click",function(){}),this.profileButton=this.querySelector(".button_profile"),this.profileButton.addEventListener("click",function(){}),this.ratingButton=this.querySelector(".button_rating"),this.ratingButton.addEventListener("click",function(){})}};var n=class extends HTMLElement{constructor(){super(),this.createdCallback()}createdCallback(){this.setAttribute("class","profile g-all-height"),this.innerHTML='<form class="profile__form form">\n                <div class="input-block profile__input-block">\n                    <label class="label">Имя:</label>\n                    <input class="input" name="firstName" type="text" required>\n                </div>\n                <div class="input-block profile__input-block" >\n                    <label class="label">Фамилия:</label>\n                    <input class="input" name="lastName" type="text" required>\n                </div>\n                <div class="input-block profile__input-block">\n                    <label class="label">Email:</label>\n                    <input class="input" name="email" type="email" required>\n                </div>\n                <div class="input-block profile__input-block">\n                    <input type="submit" class="save-button button" value="Сохранить данные"></button>\n                </div>\n            </form>',this.saveButton=this.querySelector(".save-button"),this.form=this.querySelector(".form"),this.addListeners()}addListeners(){this.saveButton.addEventListener("click",t=>{this.form.checkValidity()||(t.preventDefault(),this.data={firstName:this.form.firstName,lastName:this.form.lastName,email:this.form.email},this.save())})}save(){window.localStorage.currentUser=this.data.email,window.localStorage[this.data.email]=JSON.stringify(this.data),this.dispatchEvent(new CustomEvent("profileSaved",{detail:this.data,bubbles:!0}))}};var a=class extends HTMLElement{constructor(){super(),this.createdCallback()}createdCallback(){this.complexities={novice:{x:4,y:3},medium:{x:6,y:4},advance:{x:6,y:6}},this.setAttribute("class","setting g-all-height"),this.innerHTML=`<h1>Настройки игры</h2>\n        <div class="setting__body">\n            <div class="setting__block setting__block_complexity">\n                <h2 class="setting__title">Сложность: </h2>\n                <div data-complexity="novice" class="setting__item setting__item_novice">                    \n                    ${this.renderComplexityTable(this.complexities.novice)}                    \n                </div>\n                <div data-complexity="advance" class="setting__item setting__item_advance">\n                    ${this.renderComplexityTable(this.complexities.advance)}                    \n                </div>\n                <div data-complexity="medium" class="setting__item setting__item_medium">\n                    ${this.renderComplexityTable(this.complexities.medium)}                    \n                </div>\n            </div>\n            <div class="setting__block setting__block_background">\n                <h2 class="setting__title">Рубашка: </h2>\n                <div data-background="cars" class="setting__item setting__item_cars">                    \n                </div>\n                <div data-background="football" class="setting__item setting__item_football">                    \n                </div>\n                <div data-background="got" class="setting__item setting__item_got">                    \n                </div>\n            </div>\n        </div>\n        <div>\n            <button class="setting__save-button button">Сохранить и играть</button>\n        </div>`,this.saveButton=this.querySelector(".setting__save-button"),this.addListeners()}renderComplexityTable(t){let e=document.createElement("table");e.classList.add("complexity");for(let s=1;s<=t.y;s++){let i=document.createElement("tr");for(let e=1;e<=t.x;e++){let t=document.createElement("td");t.textContent=`${s} x ${e}`,i.appendChild(t)}e.appendChild(i)}return e.outerHTML}addListeners(){this.settingBody=this.querySelector(".setting__body"),this.settingBody.addEventListener("click",t=>{let e=t.target.classList.contains("setting__item")?t.target:t.target.closest(".setting__item");e&&(this.complexity=e.dataset.complexity?e.dataset.complexity:this.complexity,this.background=e.dataset.background?e.dataset.background:this.background,e.parentElement.querySelectorAll(".setting__item").forEach(t=>{t.classList.remove("setting__item_selected")}),e.classList.add("setting__item_selected"))}),this.saveButton.addEventListener("click",t=>{this.dispatchEvent(new CustomEvent("settingSaved",{bubbles:!0,detail:{complexity:this.complexities[this.complexity],background:this.background}}))})}};var l=class extends HTMLElement{constructor(){super(),this.createdCallback()}createdCallback(){this.classList.add("start","g-all-height"),this.innerHTML=' <div class="greeting">\n                Приветствую!\n            </div>\n            <div class="rules">\n                <h2 class="title">Правила игры: </h2>\n                <p class="rules__rule">Вы должны найти все пары карт за 2 минуты.</p>\n                <p class="rules__rule">Для старта необходимо ввести пользовательские данные.</p>\n            </div> \n            <div>\n                <button class="button button_start">Заполнить данные</button>\n            </div>',this.addListeners()}addListeners(){this.startButton=this.querySelector(".button_start"),this.startButton.addEventListener("click",function(t){this.dispatchEvent(new CustomEvent("startClick",{bubbles:!0,detail:this.event}))})}};var r=class extends HTMLElement{constructor(t,e){super(),this.complexity=t,this.background=e,this.number=this.complexity.x*this.complexity.y,this.field=[],this.createdCallback()}createdCallback(){this.setAttribute("class","battlefield battlefield__content g-all-height"),this.style=`grid-template: repeat(${this.complexity.y}, 1fr) / repeat(${this.complexity.x}, 1fr)`;for(let t=0;t<this.number;t++){let t=document.createElement("div");t.setAttribute("class",`battlefield__cell battlefield__cell_${this.background}`),this.appendChild(t)}this.addListeners()}fillIn(){}addListeners(){this.addEventListener("click",t=>{t.target.classList.contains("battlefield__cell")})}};customElements.define("game-dashboard",i),customElements.define("game-start",l),customElements.define("game-profile",n),customElements.define("game-setting",a),customElements.define("game-battlefield",r);var d=class extends HTMLElement{createdCallback(){this.dashboard=new i,this.start=new l,this.dashboard.renderBody(this.start),this.appendChild(this.dashboard),this.addListeners()}startTimer(t){let e=60*t;this.dashboard.timer.textContent=e.secondsToHhMmSs();var s=setInterval(()=>{e--,this.dashboard.timer.textContent=e.secondsToHhMmSs()},1e3);setTimeout(()=>{clearInterval(s),this.profile=new n;let t=document.createElement("h2");t.classList.add("title"),t.textContent="Вы проиграли!",this.dashboard.renderBody(t)},60*t*1e3)}addListeners(){this.addEventListener("startClick",function(t){this.profile=new n,this.dashboard.renderBody(this.profile)}),this.addEventListener("profileSaved",function(t){this.setting=new a,this.dashboard.renderBody(this.setting)}),this.addEventListener("settingSaved",function(t){this.battlefield=new r(t.detail.complexity,t.detail.background),this.dashboard.renderBody(this.battlefield),this.startTimer(2)})}};Number.prototype.secondsToHhMmSs=function(){var t=Math.floor(this/3600),e=Math.floor((this-3600*t)/60),s=this-3600*t-60*e;return t<10&&(t="0"+t),e<10&&(e="0"+e),s<10&&(s="0"+s),t+":"+e+":"+s},document.registerElement("match-game",d),document.addEventListener("DOMContentLoaded",function(){})}]);
//# sourceMappingURL=bundle.js.map